#!/usr/bin/env python
# -*- coding: utf8 -*-

import sys
import argparse
import requests
import math
import distutils.version, glob, hashlib, json, optparse, os, re, ssl, tempfile, urllib, urllib.parse, urllib.request

COOKIE, UA, REFERER = "Cookie", "User-Agent", "Referer"                                                             # optional HTTP header names
TIMEOUT = 30                                                                                                        # connection timeout in seconds
RETIRE_JS_DEFINITIONS = "https://raw.githubusercontent.com/retirejs/retire.js/master/repository/jsrepository.json"  # Retire.JS definitions
RETIRE_JS_VERSION_MARKER = u"(\xa7\xa7version\xa7\xa7)"                                                             # Retire.JS version marker inside definitions

ssl._create_default_https_context = ssl._create_unverified_context                                                  # ignore expired and/or self-signed certificates
_headers = {}                                                                                                       # used for storing dictionary with optional header values


# JQuery Vulnerability section..................


def _retrieve_content(url, data=None):
    try:
        req = urllib.request.Request("".join(url[i].replace(' ', "%20") if i > url.find('?') else url[i] for i in range(len(url))), data.encode("utf8", "ignore") if data else None, _headers)
        retval = urllib.request.urlopen(req, timeout=TIMEOUT).read()
    except Exception as ex:
        retval = ex.read() if hasattr(ex, "read") else str(ex.args[-1])
    return (retval.decode("utf8", "ignore") if hasattr(retval, "decode") else "") or ""

def _get_definitions():
    search = glob.glob(os.path.join(tempfile.gettempdir(), "retire*.json"))
    if search:
        content = open(search[0], "r").read()
    else:
        content = _retrieve_content(RETIRE_JS_DEFINITIONS)
        if not content:
            print("[x]")
            exit(-1)
        handle, _ = tempfile.mkstemp(prefix="retire", suffix=".json", dir=tempfile.gettempdir())
        os.write(handle, content.encode("utf8"))
        os.close(handle)
    return json.loads(content)

def scan_page(url):                                                     #This section we scan page for Detect JQuery Vulnerability.
    retval = False
    try:
        hashes = dict()
        scripts = dict()
        content = _retrieve_content(url)
        for match in re.finditer(r"<script[^>]+src=['\"]?([^>]+.js)\b", content):
            script = urllib.parse.urljoin(url, match.group(1))
            if script not in scripts:
                _ = _retrieve_content(script)
                if _:
                    scripts[script] = _
                    hashes[hashlib.sha1(_.encode("utf8")).hexdigest()] = script
        if scripts:
            definitions = _get_definitions()
            for _ in definitions["dont check"]["extractors"]["uri"]:
                for script in dict(scripts):
                    if re.search(_, script):
                        del scripts[script]
            for library, definition in definitions.items():
                version = None
                for item in definition["extractors"].get("hashes", {}).items():
                    if item[0] in hashes:
                        version = item[1]
                for part in ("filename", "uri"):
                    for regex in (_.replace(RETIRE_JS_VERSION_MARKER, "(?P<version>[^\s\"]+)") for _ in definition["extractors"].get(part, [])):
                        for script in scripts:
                            match = re.search(regex, script)
                            version = match.group("version") if match else version
                for script, content in scripts.items():
                    for regex in (_.replace(RETIRE_JS_VERSION_MARKER, "(?P<version>[^\s\"]+)") for _ in definition["extractors"].get("filecontent", [])):
                        match = re.search(regex, content)
                        version = match.group("version") if match else version
                if version and version != "-":
                    for vulnerability in definition["vulnerabilities"]:
                        _ = vulnerability.get("atOrAbove", 0)
                        if distutils.version.LooseVersion(str(_)) <= version < distutils.version.LooseVersion(vulnerability["below"]):
                            print(" [x] %s %sv%s (< v%s) (info: '%s')" % (library, ("" if not _ else "(v%s <) " % _), version.replace(".min", ""), vulnerability["below"], "; ".join(vulnerability["info"])))
                            retval = True
    except KeyboardInterrupt:
        print("\r (x) Ctrl-C pressed")
    return retval





# Backup file scanning section..............

def convert_size(size_bytes): #File_Size_Detect_Function
   if size_bytes == 0:
       return "0B"
   size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
   i = int(math.floor(math.log(size_bytes, 1024)))
   p = math.pow(1024, i)
   s = round(size_bytes / p, 2)
   return "%s %s" % (s, size_name[i])

def clear():
    """

    clear() -> no return

    just clear screen for linux and windows

    """
    os.system("cls" if os.name == "nt" else "clear")

def infoheader():
    """

    infoheader() -> no return

    prints header logo and avatar target name and CID

    """
    clear()
    print("=---= Sensitive Path scanning =---=")
    print("-"*50)
    print("->>  Target: %s" %(options.target))
    print("-"*50)



def printhelp():
    """

    printhelp() -> no return

    prints header logo and displays help parameters

    """
    clear()
    print("=---= backup file scanner =---=")
    parser.print_help()



def createlist(myfile,mytarget):
    """

    createlist(string) -> list

    reads a file with files / directories and combines it with target for scan.
    returns the resulting list

    """
    lines = open(myfile, "r").readlines()
    newlist = []
    for line in lines:
        line = line.replace("\n", "") #rem break
        line = line.replace("\r", "") #rem return
        line = mytarget + "/" + line
        newlist.append(line)
    return newlist



def scantarget(host,status_filter):
    val = int(status_filter[0])
    scan = requests.get(host, stream=True)
    try:
        filesize = convert_size(float(scan.headers['Content-Length']))
        if(val == scan.status_code):
            print("Found: " + filesize + "  " + "[" + str(scan.status_code) + "] " + host)

    except:
    	pass


if __name__=="__main__":   #Our program will start from here
    parser = argparse.ArgumentParser() #here we take input from user
    parser.add_argument("-t", "--target", dest="target",default="",help="specify the target host e.g. https://www.google.com")
    parser.add_argument("-f", "--file", dest="file",default="",help="specify the filename with files and directories to scan for")
    parser.add_argument("-d", "--display",dest="display_list",default=[200],nargs='+',type=int,help="display just certain status codes")
    options = parser.parse_args()
    if len(sys.argv) < 2:
        printhelp() #This will show user help page where user will learn from help page.
        quit()
    else:
        target = options.target
        file = options.file
        filter_list = options.display_list
        infoheader()
        listtoscan = createlist(file,target)
        for scanitem in listtoscan:
            scantarget(scanitem,filter_list)

   ## From This Section HSTS Vulnerability Detection works.

    print("\n\n\n")
    print("=---= HSTS Vulnerability scaning =---=")
    print("-"*50)
    print("->>  Target: %s" %(options.target))
    print("-"*50)

    try:
        req = requests.get(options.target)
    except requests.exceptions.SSLError as error:
        print("Website Does Not have a Working SSL Certificate")
    if "strict-transport-security" in req.headers:
        print("Yes| Header Found!")
    else:
        print("No | Header Found ")



    #This Section will Detect Vulnerabile JQuery.

    print("\n\n\n")
    print("=---= JQuery Vulnerability scaning =---=")
    print("-"*50)
    print("->>  Target: %s" %(options.target))
    print("-"*50)

    result = scan_page(options.target) #This section call a function called scan_page where we detect JQuery vulnerability.
    print("\nscan results: %s vulnerabilities found" % ("possible" if result else "no"))




